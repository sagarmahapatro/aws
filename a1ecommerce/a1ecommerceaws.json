{
  "AWSTemplateFormatVersion":"2010-09-09",
  "Description":"CloudFormation template for a generic VPC with public private subnets (with private network Internet access via NAT)",
  "Parameters":{
    "EC2Tenancy":{
      "Description":"EC2 tenancy under the VPC. Can be one of default/dedicated",
      "Type":"String",
      "AllowedValues":[
        "dedicated",
        "default"
      ],
      "Default":"default"
    },
    "Enviornment":{
      "Description":"The Enviornment to be created. Can be one of prod/dev/qa/staging",
      "Type":"String",
      "AllowedValues":[
        "Prod",
        "Dev",
        "QA",
        "Staging"
      ],
      "Default":"Prod"
    },
    "BastionServerName":{
      "Description":"Bastion Server Name",
      "Type":"String",
      "Default":"bastion"
    },
    "EmailAddress":{
      "Description":"Email to where notifications will be sent",
      "Type":"String",
      "Default":"admin@a1ecommerce.com"
    },
    "SNSDisplayNameInfra":{
      "Default":"InfraAlert",
      "Description":"The SNS display name",
      "Type":"String",
      "MinLength":"1",
      "MaxLength":"10",
      "AllowedPattern":"[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription":"must begin with a letter and contain only alphanumeric characters."
    },
    "SNSTopicNameInfra":{
      "Default":"EcommerceInfra",
      "Description":"The SNS topic name",
      "Type":"String",
      "MinLength":"1",
      "MaxLength":"15",
      "AllowedPattern":"[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription":"must begin with a letter and contain only alphanumeric characters."
    },
    "DBName":{
      "Default":"a1ecommerce",
      "Description":"The database name",
      "Type":"String",
      "MinLength":"1",
      "MaxLength":"64",
      "AllowedPattern":"[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription":"must begin with a letter and contain only alphanumeric characters."
    },
    "DBbackupRetentionPeriod":{
      "Default":"7",
      "Description":"Database Backup Retention Perid",
      "Type":"Number",
      "MinValue":"0",
      "MaxValue":"30",
      "ConstraintDescription":"must be between 0 and 30"
    },
    "DBUser":{
      "Default":"a1dbroot",
      "NoEcho":"true",
      "Description":"The database admin account username",
      "Type":"String",
      "MinLength":"1",
      "MaxLength":"16",
      "AllowedPattern":"[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription":"must begin with a letter and contain only alphanumeric characters."
    },
    "DBPassword":{
      "Default":"a1dbroot",
      "NoEcho":"true",
      "Description":"The database admin account password",
      "Type":"String",
      "MinLength":"1",
      "MaxLength":"41",
      "AllowedPattern":"[a-zA-Z0-9]+",
      "ConstraintDescription":"must contain only alphanumeric characters."
    },
    "DBAllocatedStorage":{
      "Default":"5",
      "Description":"The size of the database (Gb)",
      "Type":"Number",
      "MinValue":"5",
      "MaxValue":"1024",
      "ConstraintDescription":"must be between 5 and 1024Gb."
    },
    "EC2InstanceASG":{
      "Description":"The EC2 instance type for ASG",
      "Type":"String",
      "Default":"t2.micro",
      "AllowedValues":[
        "t2.micro",
        "t2.small",
        "t2.medium",
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "c4.large",
        "c4.xlarge",
        "c4.2xlarge",
        "c4.4xlarge",
        "c4.8xlarge",
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "r3.large",
        "r3.xlarge",
        "r3.2xlarge",
        "r3.4xlarge",
        "r3.8xlarge",
        "i2.xlarge",
        "i2.2xlarge",
        "i2.4xlarge",
        "i2.8xlarge",
        "d2.xlarge",
        "d2.2xlarge",
        "d2.4xlarge",
        "d2.8xlarge"
      ],
      "ConstraintDescription":"must select a valid EC2 instance type."
    },
    "EC2InstanceClassNAT":{
      "Description":"The EC2 instance type",
      "Type":"String",
      "Default":"t2.micro",
      "AllowedValues":[
        "t2.micro",
        "t2.small",
        "t2.medium",
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "c4.large",
        "c4.xlarge",
        "c4.2xlarge",
        "c4.4xlarge",
        "c4.8xlarge",
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "r3.large",
        "r3.xlarge",
        "r3.2xlarge",
        "r3.4xlarge",
        "r3.8xlarge",
        "i2.xlarge",
        "i2.2xlarge",
        "i2.4xlarge",
        "i2.8xlarge",
        "d2.xlarge",
        "d2.2xlarge",
        "d2.4xlarge",
        "d2.8xlarge"
      ],
      "ConstraintDescription":"must select a valid EC2 instance type."
    },
    "EC2InstanceClassBastion":{
      "Description":"The Bastion EC2 instance type",
      "Type":"String",
      "Default":"t2.micro",
      "AllowedValues":[
        "t2.micro"
      ],
      "ConstraintDescription":"must select a valid EC2 Bastion instance type."
    },
    "DBInstanceClass":{
      "Description":"The database instance type",
      "Type":"String",
      "Default":"db.t1.micro",
      "AllowedValues":[
        "db.t1.micro",
        "db.m1.small",
        "db.m3.medium",
        "db.m3.large",
        "db.m3.xlarge",
        "db.m3.2xlarge",
        "db.r3.large",
        "db.r3.xlarge",
        "db.r3.2xlarge",
        "db.r3.4xlarge",
        "db.r3.8xlarge",
        "db.t2.micro",
        "db.t2.small",
        "db.t2.medium"
      ],
      "ConstraintDescription":"must select a valid database instance type."
    },
    "MultiAZ":{
      "Description":"Multi-AZ master database",
      "Type":"String",
      "Default":"false",
      "AllowedValues":[
        "true",
        "false"
      ],
      "ConstraintDescription":"must be true or false."
    },
    "KeyPairName":{
      "Description":"Name of an existing EC2 KeyPair , by default using one created in chapter 3 , under Creating EC2 instance key pairs",
      "NoEcho":"true",
      "MinLength":"1",
      "MaxLength":"64",
      "Default":"ec2AccessKey",
      "Type":"String",
      "AllowedPattern":"[-_ a-zA-Z0-9]*",
      "ConstraintDescription":"can contain only alphanumeric characters, spaces, dashes and underscores."
    },
    "ServerAccess":{
      "Description":"CIDR IP range allowed to login to the NAT instance",
      "Type":"String",
      "MinLength":"9",
      "MaxLength":"18",
      "Default":"0.0.0.0/0",
      "AllowedPattern":"(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription":"must be a valid CIDR range of the form x.x.x.x/x."
    },
    "AMIImageId":{
      "Description":"Use your own ImageId for LaunchConfig, by default using a default image id from us-east-1 region ",
      "Type":"String",
      "MinLength":"9",
      "MaxLength":"18",
      "Default":"ami-d05e75b8",
      "AllowedPattern":"[-_ a-zA-Z0-9]*",
      "ConstraintDescription":"Must be a valid imageID, use the one created under AMI Creation in chapter 4."
    }
  },
  "Mappings":{
    "SubnetConfig":{
      "VPC":{
        "CIDR":"10.31.0.0/16",
        "AZ":"us-east-1a"
      },
      "Public":{
        "CIDR":"10.31.16.0/20",
        "AZ":"us-east-1a"
      },
      "Private":{
        "CIDR":"10.31.80.0/20",
        "AZ":"us-east-1a"
      },
      "Bastion":{
        "CIDR":"10.31.96.0/20",
        "AZ":"us-east-1a"
      },
      "HAPublic":{
        "CIDR":"10.31.48.0/20",
        "AZ":"us-east-1d"
      },
      "DbPrivate":{
        "CIDR":"10.31.64.0/20",
        "AZ":"us-east-1d"
      }
    },
     "RegionMapNat":{
      "us-east-1":{
        "AMI":"ami-303b1458"
      },
      "us-west-1":{
        "AMI":"ami-7da94839"
      },
      "us-west-2":{
        "AMI":"ami-69ae8259"
      },
      "eu-west-1":{
        "AMI":"ami-6975eb1e"
      },
      "eu-central-1":{
        "AMI":"ami-46073a5b"
      },
      "sa-east-1":{
        "AMI":"ami-fbfa41e6"
      },
      "ap-southeast-1":{
        "AMI":"ami-b49dace6"
      },
      "ap-southeast-2":{
        "AMI":"ami-e7ee9edd"
      },
      "ap-northeast-1":{
        "AMI":"ami-03cf3903"
      }
    },

    "RegionMap":{
      "us-east-1":{
        "AMI":"ami-d05e75b8"
      },
      "us-west-1":{
        "AMI":"ami-df6a8b9b"
      },
      "us-west-2":{
        "AMI":"ami-5189a661"
      },
      "eu-west-1":{
        "AMI":"ami-47a23a30"
      },
      "eu-central-1":{
        "AMI":"ami-accff2b1"
      },
      "sa-east-1":{
        "AMI":"ami-4d883350"
      },
      "ap-southeast-1":{
        "AMI":"ami-96f1c1c4"
      },
      "ap-southeast-2":{
        "AMI":"ami-69631053"
      },
      "ap-northeast-1":{
        "AMI":"ami-936d9d93"
      }
    }
  },
  "Resources":{
    "VPC":{
      "Type":"AWS::EC2::VPC",
      "Properties":{
        "CidrBlock":{
          "Fn::FindInMap":[
            "SubnetConfig",
            "VPC",
            "CIDR"
          ]
        },
        "EnableDnsSupport":"true",
        "EnableDnsHostnames":"true",
        "InstanceTenancy":{
          "Ref":"EC2Tenancy"
        },
        "Tags":[
          {
            "Key":"Application",
            "Value":{
              "Ref":"AWS::StackName"
            }
          },
          {
            "Key":"Network",
            "Value":"Public"
          },
          {
            "Key":"Name",
            "Value":{
              "Fn::Join":[
                "",
                [
                  "Root-A1EcommerceVPC",
                  {
                    "Ref":"Enviornment"
                  }
                ]
              ]
            }
          }
        ]
      }
    },
    "PublicSubnet":{
      "DependsOn":[
        "VPC"
      ],
      "Type":"AWS::EC2::Subnet",
      "Properties":{
        "VpcId":{
          "Ref":"VPC"
        },
        "CidrBlock":{
          "Fn::FindInMap":[
            "SubnetConfig",
            "Public",
            "CIDR"
          ]
        },
        "AvailabilityZone":{
          "Fn::FindInMap":[
            "SubnetConfig",
            "Public",
            "AZ"
          ]
        },
        "Tags":[
          {
            "Key":"Application",
            "Value":{
              "Ref":"AWS::StackName"
            }
          },
          {
            "Key":"Network",
            "Value":"Public"
          },
          {
            "Key":"Name",
            "Value":"Public Subnet"
          }
        ]
      }
    },
    "BastionSubnet":{
      "DependsOn":[
        "VPC"
      ],
      "Type":"AWS::EC2::Subnet",
      "Properties":{
        "VpcId":{
          "Ref":"VPC"
        },
        "CidrBlock":{
          "Fn::FindInMap":[
            "SubnetConfig",
            "Bastion",
            "CIDR"
          ]
        },
        "AvailabilityZone":{
          "Fn::FindInMap":[
            "SubnetConfig",
            "Bastion",
            "AZ"
          ]
        },
        "Tags":[
          {
            "Key":"Application",
            "Value":{
              "Ref":"AWS::StackName"
            }
          },
          {
            "Key":"Network",
            "Value":"Bastion"
          },
          {
            "Key":"Name",
            "Value":"Bastion Subnet"
          }
        ]
      }
    },
    "HASubnet":{
      "DependsOn":[
        "VPC"
      ],
      "Type":"AWS::EC2::Subnet",
      "Properties":{
        "VpcId":{
          "Ref":"VPC"
        },
        "CidrBlock":{
          "Fn::FindInMap":[
            "SubnetConfig",
            "HAPublic",
            "CIDR"
          ]
        },
        "AvailabilityZone":{
          "Fn::FindInMap":[
            "SubnetConfig",
            "HAPublic",
            "AZ"
          ]
        },
        "Tags":[
          {
            "Key":"Application",
            "Value":{
              "Ref":"AWS::StackName"
            }
          },
          {
            "Key":"Network",
            "Value":"HAPublic"
          },
          {
            "Key":"Name",
            "Value":"HA Subnet"
          }
        ]
      }
    },
    "PrivateSubnet":{
      "DependsOn":[
        "VPC"
      ],
      "Type":"AWS::EC2::Subnet",
      "Properties":{
        "VpcId":{
          "Ref":"VPC"
        },
        "CidrBlock":{
          "Fn::FindInMap":[
            "SubnetConfig",
            "Private",
            "CIDR"
          ]
        },
        "AvailabilityZone":{
          "Fn::FindInMap":[
            "SubnetConfig",
            "Private",
            "AZ"
          ]
        },
        "Tags":[
          {
            "Key":"Application",
            "Value":{
              "Ref":"AWS::StackName"
            }
          },
          {
            "Key":"Network",
            "Value":"Private"
          },
          {
            "Key":"Name",
            "Value":"Private Subnet"
          }
        ]
      }
    },
    "DbPrivateSubnet":{
      "DependsOn":[
        "VPC"
      ],
      "Type":"AWS::EC2::Subnet",
      "Properties":{
        "VpcId":{
          "Ref":"VPC"
        },
        "CidrBlock":{
          "Fn::FindInMap":[
            "SubnetConfig",
            "DbPrivate",
            "CIDR"
          ]
        },
        "AvailabilityZone":{
          "Fn::FindInMap":[
            "SubnetConfig",
            "DbPrivate",
            "AZ"
          ]
        },
        "Tags":[
          {
            "Key":"Application",
            "Value":{
              "Ref":"AWS::StackName"
            }
          },
          {
            "Key":"Network",
            "Value":"Database Private"
          },
          {
            "Key":"Name",
            "Value":"Database Private  Subnet"
          }
        ]
      }
    },
    "InternetGateway":{
      "Type":"AWS::EC2::InternetGateway",
      "Properties":{
        "Tags":[
          {
            "Key":"Application",
            "Value":{
              "Ref":"AWS::StackName"
            }
          },
          {
            "Key":"Network",
            "Value":"Public"
          }
        ]
      }
    },
    "GatewayToInternet":{
      "DependsOn":[
        "VPC",
        "InternetGateway"
      ],
      "Type":"AWS::EC2::VPCGatewayAttachment",
      "Properties":{
        "VpcId":{
          "Ref":"VPC"
        },
        "InternetGatewayId":{
          "Ref":"InternetGateway"
        }
      }
    },
    "PublicRouteTable":{
      "DependsOn":[
        "VPC"
      ],
      "Type":"AWS::EC2::RouteTable",
      "Properties":{
        "VpcId":{
          "Ref":"VPC"
        },
        "Tags":[
          {
            "Key":"Application",
            "Value":{
              "Ref":"AWS::StackName"
            }
          },
          {
            "Key":"Network",
            "Value":"Public"
          }
        ]
      }
    },
    "PublicRoute":{
      "DependsOn":[
        "PublicRouteTable",
        "InternetGateway"
      ],
      "Type":"AWS::EC2::Route",
      "Properties":{
        "RouteTableId":{
          "Ref":"PublicRouteTable"
        },
        "DestinationCidrBlock":"0.0.0.0/0",
        "GatewayId":{
          "Ref":"InternetGateway"
        }
      }
    },
    "PublicSubnetRouteTableAssociation":{
      "DependsOn":[
        "PublicSubnet",
        "PublicRouteTable"
      ],
      "Type":"AWS::EC2::SubnetRouteTableAssociation",
      "Properties":{
        "SubnetId":{
          "Ref":"PublicSubnet"
        },
        "RouteTableId":{
          "Ref":"PublicRouteTable"
        }
      }
    },
    "BastionSubnetRouteTableAssociation":{
      "DependsOn":[
        "BastionSubnet",
        "PublicRouteTable"
      ],
      "Type":"AWS::EC2::SubnetRouteTableAssociation",
      "Properties":{
        "SubnetId":{
          "Ref":"BastionSubnet"
        },
        "RouteTableId":{
          "Ref":"PublicRouteTable"
        }
      }
    },
    "HASubnetRouteTableAssociation":{
      "DependsOn":[
        "HASubnet",
        "PublicRouteTable"
      ],
      "Type":"AWS::EC2::SubnetRouteTableAssociation",
      "Properties":{
        "SubnetId":{
          "Ref":"HASubnet"
        },
        "RouteTableId":{
          "Ref":"PublicRouteTable"
        }
      }
    },
    "PrivateRouteTable":{
      "DependsOn":[
        "VPC"
      ],
      "Type":"AWS::EC2::RouteTable",
      "Properties":{
        "VpcId":{
          "Ref":"VPC"
        },
        "Tags":[
          {
            "Key":"Application",
            "Value":{
              "Ref":"AWS::StackName"
            }
          },
          {
            "Key":"Network",
            "Value":"Private"
          }
        ]
      }
    },
    "DbPrivateRouteTable":{
      "DependsOn":[
        "VPC"
      ],
      "Type":"AWS::EC2::RouteTable",
      "Properties":{
        "VpcId":{
          "Ref":"VPC"
        },
        "Tags":[
          {
            "Key":"Application",
            "Value":{
              "Ref":"AWS::StackName"
            }
          },
          {
            "Key":"Network",
            "Value":"Database Private Route Table"
          }
        ]
      }
    },
    "PrivateSubnetRouteTableAssociation":{
      "DependsOn":[
        "PrivateSubnet",
        "PrivateRouteTable"
      ],
      "Type":"AWS::EC2::SubnetRouteTableAssociation",
      "Properties":{
        "SubnetId":{
          "Ref":"PrivateSubnet"
        },
        "RouteTableId":{
          "Ref":"PrivateRouteTable"
        }
      }
    },
    "DbPrivateSubnetRouteTableAssociation":{
      "DependsOn":[
        "DbPrivateSubnet",
        "DbPrivateRouteTable"
      ],
      "Type":"AWS::EC2::SubnetRouteTableAssociation",
      "Properties":{
        "SubnetId":{
          "Ref":"DbPrivateSubnet"
        },
        "RouteTableId":{
          "Ref":"DbPrivateRouteTable"
        }
      }
    },
    "NAT":{
      "DependsOn":[
        "PublicSubnet",
        "NatSecurityGroup"
      ],
      "Type":"AWS::EC2::Instance",
      "Properties":{
        "InstanceType":{
          "Ref":"EC2InstanceClassNAT"
        },
        "KeyName":{
          "Ref":"KeyPairName"
        },
        "SourceDestCheck":"false",
        "ImageId":{
          "Fn::FindInMap":[
            "RegionMapNat",
            {
              "Ref":"AWS::Region"
            },
            "AMI"
          ]
        },
        "NetworkInterfaces":[
          {
            "GroupSet":[
              {
                "Ref":"NatSecurityGroup"
              }
            ],
            "AssociatePublicIpAddress":"true",
            "DeviceIndex":"0",
            "DeleteOnTermination":"true",
            "SubnetId":{
              "Ref":"PublicSubnet"
            }
          }
        ],
        "Tags":[
          {
            "Key":"Name",
            "Value":"NAT"
          }
        ],
        "UserData":{
          "Fn::Base64":{
            "Fn::Join":[
              "",
              [
                "#!/bin/bash\n",
                "echo Boot"
              ]
            ]
          }
        }
      }
    },
    "PrivateRoute":{
      "DependsOn":[
        "PrivateRouteTable",
        "NAT"
      ],
      "Type":"AWS::EC2::Route",
      "Properties":{
        "RouteTableId":{
          "Ref":"PrivateRouteTable"
        },
        "DestinationCidrBlock":"0.0.0.0/0",
        "InstanceId":{
          "Ref":"NAT"
        }
      }
    },
    "NatSecurityGroup":{
      "DependsOn":[
        "VPC"
      ],
      "Type":"AWS::EC2::SecurityGroup",
      "Properties":{
        "GroupDescription":"NAT Security Group",
        "VpcId":{
          "Ref":"VPC"
        },
        "SecurityGroupIngress":[
          {
            "IpProtocol":"tcp",
            "FromPort":"22",
            "ToPort":"22",
            "SourceSecurityGroupId":{
              "Fn::GetAtt":[
                "PrivateSecurityGroup",
                "GroupId"
              ]
            }
          },
          {
            "IpProtocol":"tcp",
            "FromPort":"22",
            "ToPort":"22",
            "SourceSecurityGroupId":{
              "Fn::GetAtt":[
                "BastionSecurityGroup",
                "GroupId"
              ]
            }
          },
          {
            "IpProtocol":"tcp",
            "FromPort":"80",
            "ToPort":"80",
            "SourceSecurityGroupId":{
              "Fn::GetAtt":[
                "PrivateSecurityGroup",
                "GroupId"
              ]
            }
          },
          {
            "IpProtocol":"tcp",
            "FromPort":"443",
            "ToPort":"443",
            "SourceSecurityGroupId":{
              "Fn::GetAtt":[
                "PrivateSecurityGroup",
                "GroupId"
              ]
            }
          }
        ],
        "SecurityGroupEgress":[
          {
            "IpProtocol":"tcp",
            "FromPort":"22",
            "ToPort":"22",
            "CidrIp":"0.0.0.0/0"
          },
          {
            "IpProtocol":"tcp",
            "FromPort":"80",
            "ToPort":"80",
            "CidrIp":"0.0.0.0/0"
          },
          {
            "IpProtocol":"tcp",
            "FromPort":"443",
            "ToPort":"443",
            "CidrIp":"0.0.0.0/0"
          }
        ],
        "Tags":[
          {
            "Key":"Name",
            "Value":"NAT Security Group"
          }
        ]
      }
    },
    "ELBSecurityGroup":{
      "DependsOn":[
        "VPC"
      ],
      "Type":"AWS::EC2::SecurityGroup",
      "Properties":{
        "GroupDescription":"ELB Base Security Group",
        "VpcId":{
          "Ref":"VPC"
        },
        "SecurityGroupIngress":[
          {
            "IpProtocol":"tcp",
            "FromPort":"8080",
            "ToPort":"8080",
            "CidrIp":"0.0.0.0/0"
          },
          {
            "IpProtocol":"tcp",
            "FromPort":"8443",
            "ToPort":"8443",
            "CidrIp":"0.0.0.0/0"
          }
        ],
        "Tags":[
          {
            "Key":"Name",
            "Value":"ELB Security Group"
          }
        ]
      }
    },
    "ELBSecurityGroupEgress80":{
      "DependsOn":[
        "ELBSecurityGroup"
      ],
      "Type":"AWS::EC2::SecurityGroupEgress",
      "Properties":{
        "GroupId":{
          "Ref":"ELBSecurityGroup"
        },
        "IpProtocol":"tcp",
        "FromPort":"8080",
        "ToPort":"8080",
        "DestinationSecurityGroupId":{
          "Fn::GetAtt":[
            "WebSecurityGroupPublic",
            "GroupId"
          ]
        }
      }
    },
    "ELBSecurityGroupEgress443":{
      "DependsOn":[
        "ELBSecurityGroup"
      ],
      "Type":"AWS::EC2::SecurityGroupEgress",
      "Properties":{
        "GroupId":{
          "Ref":"ELBSecurityGroup"
        },
        "IpProtocol":"tcp",
        "FromPort":"8443",
        "ToPort":"8443",
        "DestinationSecurityGroupId":{
          "Fn::GetAtt":[
            "WebSecurityGroupPublic",
            "GroupId"
          ]
        }
      }
    },
    "WebSecurityGroupPublic":{
      "DependsOn":[
        "VPC",
        "ELBSecurityGroup"
      ],
      "Type":"AWS::EC2::SecurityGroup",
      "Properties":{
        "GroupDescription":"Public facing  Security Group",
        "VpcId":{
          "Ref":"VPC"
        },
        "SecurityGroupIngress":[
          {
            "IpProtocol":"tcp",
            "FromPort":"8080",
            "ToPort":"8080",
            "SourceSecurityGroupId":{
              "Fn::GetAtt":[
                "ELBSecurityGroup",
                "GroupId"
              ]
            }
          },
          {
            "IpProtocol":"tcp",
            "FromPort":"8443",
            "ToPort":"8443",
            "SourceSecurityGroupId":{
              "Fn::GetAtt":[
                "ELBSecurityGroup",
                "GroupId"
              ]
            }
          },
          {
            "IpProtocol":"tcp",
            "FromPort":"22",
            "ToPort":"22",
            "SourceSecurityGroupId":{
              "Fn::GetAtt":[
                "BastionSecurityGroup",
                "GroupId"
              ]
            }
          }
        ],
        "Tags":[
          {
            "Key":"Name",
            "Value":"Public WebSecurityGroup"
          }
        ]
      }
    },
    "WebSecurityGroupEgress3306":{
      "DependsOn":[
        "WebSecurityGroupPublic"
      ],
      "Type":"AWS::EC2::SecurityGroupEgress",
      "Properties":{
        "GroupId":{
          "Ref":"WebSecurityGroupPublic"
        },
        "IpProtocol":"tcp",
        "FromPort":"3306",
        "ToPort":"3306",
        "DestinationSecurityGroupId":{
          "Fn::GetAtt":[
            "PrivateSecurityGroup",
            "GroupId"
          ]
        }
      }
    },
    
    "WebSecurityGroupEgress80":{
      "DependsOn":[
        "WebSecurityGroupPublic"
      ],
      "Type":"AWS::EC2::SecurityGroupEgress",
      "Properties":{
        "GroupId":{
          "Ref":"WebSecurityGroupPublic"
        },
        "IpProtocol":"tcp",
        "FromPort":"80",
        "ToPort":"80",
        "CidrIp":"0.0.0.0/0"
      }
    },
    "WebSecurityGroupEgress443":{
      "DependsOn":[
        "WebSecurityGroupPublic"
      ],
      "Type":"AWS::EC2::SecurityGroupEgress",
      "Properties":{
        "GroupId":{
          "Ref":"WebSecurityGroupPublic"
        },
        "IpProtocol":"tcp",
        "FromPort":"443",
        "ToPort":"443",
		"CidrIp":"0.0.0.0/0"
      }
    },
    "BastionSecurityGroup":{
      "DependsOn":[
        "VPC"
      ],
      "Type":"AWS::EC2::SecurityGroup",
      "Properties":{
        "GroupDescription":"Bastion security group",
        "VpcId":{
          "Ref":"VPC"
        },
        "SecurityGroupIngress":[
          {
            "IpProtocol":"tcp",
            "FromPort":"22",
            "ToPort":"22",
            "CidrIp":{
              "Ref":"ServerAccess"
            }
          }
        ],
        "Tags":[
          {
            "Key":"Name",
            "Value":"Bastion security group"
          }
        ]
      }
    },
    
    "BastionSecurityGroupEgressAll":{
      "DependsOn":[
        "BastionSecurityGroup"
      ],
      "Type":"AWS::EC2::SecurityGroupEgress",
      "Properties":{
        "GroupId":{
          "Ref":"BastionSecurityGroup"
        },
        "IpProtocol": "tcp",
        "FromPort": "0",
        "ToPort": "65535",
        "CidrIp": "0.0.0.0/0"
      }
    },
    "PrivateSecurityGroup":{
      "DependsOn":[
        "VPC"
      ],
      "Type":"AWS::EC2::SecurityGroup",
      "Properties":{
        "GroupDescription":"Private Base Security Group",
        "VpcId":{
          "Ref":"VPC"
        },
        "SecurityGroupIngress":[
          {
            "IpProtocol":"tcp",
            "FromPort":"22",
            "ToPort":"22",
            "SourceSecurityGroupId":{
              "Fn::GetAtt":[
                "BastionSecurityGroup",
                "GroupId"
              ]
            }
          },
          {
            "IpProtocol":"tcp",
            "FromPort":"8080",
            "ToPort":"8080",
            "SourceSecurityGroupId":{
              "Fn::GetAtt":[
                "WebSecurityGroupPublic",
                "GroupId"
              ]
            }
          },
          {
            "IpProtocol":"tcp",
            "FromPort":"8443",
            "ToPort":"8443",
            "SourceSecurityGroupId":{
              "Fn::GetAtt":[
                "WebSecurityGroupPublic",
                "GroupId"
              ]
            }
          },
          {
            "IpProtocol":"tcp",
            "FromPort":"3306",
            "ToPort":"3306",
            "SourceSecurityGroupId":{
              "Fn::GetAtt":[
                "WebSecurityGroupPublic",
                "GroupId"
              ]
            }
          },
          {
            "IpProtocol":"tcp",
            "FromPort":"3306",
            "ToPort":"3306",
            "SourceSecurityGroupId":{
              "Fn::GetAtt":[
                "BastionSecurityGroup",
                "GroupId"
              ]
            }
          }
        ],
        "Tags":[
          {
            "Key":"Name",
            "Value":"Private Security Group"
          }
        ]
      }
    },
    "PrivateSecurityGroupIngress3306":{
      "DependsOn":[
        "PrivateSecurityGroup"
      ],
      "Type":"AWS::EC2::SecurityGroupIngress",
      "Properties":{
        "GroupId":{
          "Ref":"PrivateSecurityGroup"
        },
        "IpProtocol":"tcp",
        "FromPort":"3306",
        "ToPort":"3306",
        "SourceSecurityGroupId":{
          "Fn::GetAtt":[
            "PrivateSecurityGroup",
            "GroupId"
          ]
        }
      }
    },
    "PrivateSecurityGroupEgress22":{
      "DependsOn":[
        "PrivateSecurityGroup"
      ],
      "Type":"AWS::EC2::SecurityGroupEgress",
      "Properties":{
        "GroupId":{
          "Ref":"PrivateSecurityGroup"
        },
        "IpProtocol":"tcp",
        "FromPort":"22",
        "ToPort":"22",
        "DestinationSecurityGroupId":{
          "Fn::GetAtt":[
            "NatSecurityGroup",
            "GroupId"
          ]
        }
      }
    },
    "PrivateSecurityGroupEgress801":{
      "DependsOn":[
        "PrivateSecurityGroup"
      ],
      "Type":"AWS::EC2::SecurityGroupEgress",
      "Properties":{
        "GroupId":{
          "Ref":"PrivateSecurityGroup"
        },
        "IpProtocol":"tcp",
        "FromPort":"8080",
        "ToPort":"8080",
        "DestinationSecurityGroupId":{
          "Fn::GetAtt":[
            "WebSecurityGroupPublic",
            "GroupId"
          ]
        }
      }
    },
    "PrivateSecurityGroupEgress4431":{
      "DependsOn":[
        "PrivateSecurityGroup"
      ],
      "Type":"AWS::EC2::SecurityGroupEgress",
      "Properties":{
        "GroupId":{
          "Ref":"PrivateSecurityGroup"
        },
        "IpProtocol":"tcp",
        "FromPort":"8443",
        "ToPort":"8443",
        "DestinationSecurityGroupId":{
          "Fn::GetAtt":[
            "WebSecurityGroupPublic",
            "GroupId"
          ]
        }
      }
    },
    "PrivateSecurityGroupEgress80":{
      "DependsOn":[
        "PrivateSecurityGroup"
      ],
      "Type":"AWS::EC2::SecurityGroupEgress",
      "Properties":{
        "GroupId":{
          "Ref":"PrivateSecurityGroup"
        },
        "IpProtocol":"tcp",
        "FromPort":"80",
        "ToPort":"80",
        "DestinationSecurityGroupId":{
          "Fn::GetAtt":[
            "NatSecurityGroup",
            "GroupId"
          ]
        }
      }
    },
    "PrivateSecurityGroupEgress443":{
      "DependsOn":[
        "PrivateSecurityGroup"
      ],
      "Type":"AWS::EC2::SecurityGroupEgress",
      "Properties":{
        "GroupId":{
          "Ref":"PrivateSecurityGroup"
        },
        "IpProtocol":"tcp",
        "FromPort":"443",
        "ToPort":"443",
        "DestinationSecurityGroupId":{
          "Fn::GetAtt":[
            "NatSecurityGroup",
            "GroupId"
          ]
        }
      }
    },
    "A1SNSInfraAlert":{
      "Type":"AWS::SNS::Topic",
      "Properties":{
        "DisplayName":{
          "Ref":"SNSDisplayNameInfra"
        },
        "TopicName":{
          "Ref":"SNSTopicNameInfra"
        },
        "Subscription":[
          {
            "Endpoint":{
              "Ref":"EmailAddress"
            },
            "Protocol":"email"
          }
        ]
      }
    },
    "RDSSubnetGroup":{
      "Type":"AWS::RDS::DBSubnetGroup",
      "Properties":{
        "DBSubnetGroupDescription":"Availability Zones for A1EcommerceDB",
        "SubnetIds":[
          {
            "Ref":"PrivateSubnet"
          },
          {
            "Ref":"DbPrivateSubnet"
          }
        ]
      }
    },
    "A1EcommerceDB":{
      "Type":"AWS::RDS::DBInstance",
      "Properties":{
        "DBName":{
          "Ref":"DBName"
        },
        "DBInstanceIdentifier":{
          "Ref":"DBName"
        },
        "AllocatedStorage":{
          "Ref":"DBAllocatedStorage"
        },
        "DBInstanceClass":{
          "Ref":"DBInstanceClass"
        },
        "BackupRetentionPeriod":{
          "Ref":"DBbackupRetentionPeriod"
        },
        "Engine":"MySQL",
        "MasterUsername":{
          "Ref":"DBUser"
        },
        "MasterUserPassword":{
          "Ref":"DBPassword"
        },
        "MultiAZ":{
          "Ref":"MultiAZ"
        },
        "Tags":[
          {
            "Key":"Name",
            "Value":"AlEcommerce Master Database"
          }
        ],
        "DBSubnetGroupName":{
          "Ref":"RDSSubnetGroup"
        },
        "VPCSecurityGroups":[
          {
            "Fn::GetAtt":[
              "PrivateSecurityGroup",
              "GroupId"
            ]
          }
        ]
      },
      "DeletionPolicy":"Snapshot"
    },
    "BastionEC2":{
      "DependsOn":[
        "PublicSubnet",
        "BastionSecurityGroup"
      ],
      "Type":"AWS::EC2::Instance",
      "Properties":{
        "InstanceType":{
          "Ref":"EC2InstanceClassBastion"
        },
        "KeyName":{
          "Ref":"KeyPairName"
        },
        "SourceDestCheck":"false",
        "ImageId":{
          "Fn::FindInMap":[
            "RegionMap",
            {
              "Ref":"AWS::Region"
            },
            "AMI"
          ]
        },
        "NetworkInterfaces":[
          {
            "GroupSet":[
              {
                "Ref":"BastionSecurityGroup"
              }
            ],
            "AssociatePublicIpAddress":"true",
            "DeviceIndex":"0",
            "DeleteOnTermination":"true",
            "SubnetId":{
              "Ref":"BastionSubnet"
            }
          }
        ],
        "Tags":[
          {
            "Key":"Name",
            "Value":"Bastion Instance"
          }
        ],
        "UserData":{
          "Fn::Base64":{
            "Fn::Join":[
              "",
              [
                "#!/bin/bash\n",
                "echo In work\n"
              ]
            ]
          }
        }
      }
    },
    "EIP":{
      "Type":"AWS::EC2::EIP",
      "Properties":{
        "Domain":"vpc"
      }
    },
    "IPAssoc":{
      "DependsOn":"BastionEC2",
      "Type":"AWS::EC2::EIPAssociation",
      "Properties":{
        "InstanceId":{
          "Ref":"BastionEC2"
        },
        "EIP":{
          "Ref":"EIP"
        }
      }
    },

    "LaunchConfig":{
      "Type":"AWS::AutoScaling::LaunchConfiguration",
      "Properties":{
        "KeyName":{
          "Ref":"KeyPairName"
        },
		"AssociatePublicIpAddress" : "true",       
        "ImageId":{
          "Ref":"AMIImageId"
        },
        "SecurityGroups" : [ { "Ref" : "WebSecurityGroupPublic" } ],
        "InstanceType":{
          "Ref":"EC2InstanceASG"
        },
        "UserData":{
          "Fn::Base64":{
            "Fn::Join":[
              "",
              [
                "#!/bin/bash -xe\n",
                "\n",
                " \n",
                " \n"
              ]
            ]
          }
        }
      }
    },
    "WebServerGroup":{
        "Type":"AWS::AutoScaling::AutoScalingGroup",
        "DependsOn":[
          "LaunchConfig","ElasticLoadBalancer"
        ],
        "Properties":{
          "AvailabilityZones" : [ 
              {"Fn::GetAtt" : [ "HASubnet" , "AvailabilityZone"] },
              {"Fn::GetAtt" : [ "PublicSubnet" , "AvailabilityZone"] }
          ],
          "LaunchConfigurationName":{
            "Ref":"LaunchConfig"
          },
          "MinSize":"1",
          "MaxSize":"1",
          "LoadBalancerNames":[
            {"Ref":"ElasticLoadBalancer"}
          ],
          "VPCZoneIdentifier":[
            { "Ref" : "HASubnet" },
            { "Ref" : "PublicSubnet" }
          ],
          "Tags" : [{
            "Key"   : "Name",
            "Value" : { "Fn::Join"  : [ "-" , [ { "Ref" : "AWS::StackName" }, "Public ASG WebServerGroup" ]]},
            "PropagateAtLaunch" : "true"
          }],
          "NotificationConfiguration":{
            "TopicARN":{"Ref":"A1SNSInfraAlert"
            },
            "NotificationTypes":[
              "autoscaling:EC2_INSTANCE_LAUNCH",
              "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
              "autoscaling:EC2_INSTANCE_TERMINATE",
              "autoscaling:EC2_INSTANCE_TERMINATE_ERROR"
            ]
          }
        }
    },
    
    "WebServerScaleUpPolicy":{
      "Type":"AWS::AutoScaling::ScalingPolicy",
      "Properties":{
        "AdjustmentType":"ChangeInCapacity",
        "AutoScalingGroupName":{
          "Ref":"WebServerGroup"
        },
        "Cooldown":"60",
        "ScalingAdjustment":"1"
      }
    },
    "WebServerScaleDownPolicy":{
      "Type":"AWS::AutoScaling::ScalingPolicy",
      "Properties":{
        "AdjustmentType":"ChangeInCapacity",
        "AutoScalingGroupName":{
          "Ref":"WebServerGroup"
        },
        "Cooldown":"60",
        "ScalingAdjustment":"-1"
      }
    },
    "CPUAlarmHigh":{
      "Type":"AWS::CloudWatch::Alarm",
      "Properties":{
        "AlarmDescription":"Scale-up if CPU > 90% for 10 minutes",
        "MetricName":"CPUUtilization",
        "Namespace":"AWS/EC2",
        "Statistic":"Average",
        "Period":"300",
        "EvaluationPeriods":"2",
        "Threshold":"90",
        "AlarmActions":[
          {
            "Ref":"WebServerScaleUpPolicy"
          }
        ],
        "Dimensions":[
          {
            "Name":"AutoScalingGroupName",
            "Value":{
              "Ref":"WebServerGroup"
            }
          }
        ],
        "ComparisonOperator":"GreaterThanThreshold"
      }
    },
    "CPUAlarmLow":{
      "Type":"AWS::CloudWatch::Alarm",
      "Properties":{
        "AlarmDescription":"Scale-down if CPU < 70% for 10 minutes",
        "MetricName":"CPUUtilization",
        "Namespace":"AWS/EC2",
        "Statistic":"Average",
        "Period":"300",
        "EvaluationPeriods":"2",
        "Threshold":"70",
        "AlarmActions":[
          {
            "Ref":"WebServerScaleDownPolicy"
          }
        ],
        "Dimensions":[
          {
            "Name":"AutoScalingGroupName",
            "Value":{
              "Ref":"WebServerGroup"
            }
          }
        ],
        "ComparisonOperator":"LessThanThreshold"
      }
    },
    "ElasticLoadBalancer":{
        "Type":"AWS::ElasticLoadBalancing::LoadBalancer",
        "DependsOn":[
          "PublicSubnet", "HASubnet"
        ],
        "Properties":{
          "Subnets":[
            {"Ref":"PublicSubnet"},{"Ref":"HASubnet"}
          ],
          "CrossZone":"true",
          "Listeners":[
            {
              "LoadBalancerPort":"8080",
              "InstancePort":"8080",
              "Protocol":"HTTP"
            },
            {
              "LoadBalancerPort":"8443",
              "InstancePort":"8443",
              "Protocol":"TCP"
            }
          ],
          "ConnectionDrainingPolicy":{
            "Enabled":"true","Timeout":"60"
          },
          "SecurityGroups" : [ { "Ref" : "ELBSecurityGroup" } ],
          "HealthCheck":{
            "Target":"HTTP:8080/index.html",
            "HealthyThreshold":"3",
            "UnhealthyThreshold":"5",
            "Interval":"30",
            "Timeout":"5"
          }
    }

  }

  },
  "Outputs":{
    "NATIP":{
      "Description":"NAT IP address",
      "Value":{
        "Fn::GetAtt":[
          "NAT",
          "PublicIp"
        ]
      }
    },
    "BASTIONIP":{
      "Description":"Bastion IP address",
      "Value":{
        "Fn::GetAtt":[
          "BastionEC2",
          "PublicIp"
        ]
      }
    },
    "VPC":{
      "Description":"VPC ",
      "Value":{
        "Ref":"VPC"
      }
    },
    "PublicSubnet":{
      "Description":"Public Subnet  ",
      "Value":{
        "Ref":"PublicSubnet"
      }
    },
    "PrivateSubnet":{
      "Description":"Private Subnet ",
      "Value":{
        "Ref":"PrivateSubnet"
      }
    },
    "HASubnet":{
      "Description":"HA Subnet ",
      "Value":{
        "Ref":"HASubnet"
      }
    },
    "DbPrivateSubnet":{
      "Description":"Secondary DB PRivate  ",
      "Value":{
        "Ref":"DbPrivateSubnet"
      }
    },
    "BastionSubnet":{
      "Description":"Bastion Subnet ",
      "Value":{
        "Ref":"BastionSubnet"
      }
    },
    "URL" : {
      "Description" : "The URL of the A1Ecommerce",
      "Value" :  { "Fn::Join" : [ "", [ "http://", { "Fn::GetAtt" : [ "ElasticLoadBalancer", "DNSName" ]}]]}
    },
    "MasterJDBCConnectionString":{
      "Description":"JDBC connection string for the master database",
      "Value":{
        "Fn::Join":[
          "",
          [
            "jdbc:mysql://",
            {
              "Fn::GetAtt":[
                "A1EcommerceDB","Endpoint.Address"
              ]
            },
            ":",
            {
              "Fn::GetAtt":[
                "A1EcommerceDB","Endpoint.Port"
              ]
            },
            "/",
            {
              "Ref":"DBName"
            }
          ]
        ]
      }
    }
  }
}
